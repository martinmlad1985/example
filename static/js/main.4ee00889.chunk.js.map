{"version":3,"sources":["API/API.js","Redux/AuthReducer.ts","Redux/AppReducer.ts","Redux/store_redux.js","Components/Navbar/MyMessage/MyMessage.jsx","Components/Navbar/MyPage/MyPage.jsx","Components/Navbar/Users/Users.jsx","Components/Navbar/Navbar.jsx","Components/Header/Header.jsx","Components/Header/HeaderContainer.jsx","App.js","serviceWorker.js","index.js","Components/Header/Header.module.css","Components/Preloader/Preloader.jsx","Redux/MyPostsReducer.ts","Redux/MyDialogsReducer.ts","Redux/MyUsersReducer.js","App.module.css","Components/Navbar/Navbar.module.css","Components/Navbar/MyMessage/MyMessage.module.css","Components/Navbar/MyPage/MyPage.module.css","Components/Navbar/Users/Users.module.css","assets/images/preloader.png"],"names":["instance","axios","withCredentials","baseURL","headers","authAPI","authMe","get","then","response","data","login","formData","post","logout","delete","usersAPI","unfollow","userId","follow","getUsersList","currentPage","pageSize","profileAPI","getStatus","updateStatus","status","put","profileData","initialState","id","email","isAuth","getUserData","type","getUserDataThunkCreator","dispatch","resultCode","sendLoginCreator","message","messages","length","stopSubmit","_error","sendLogoutCreator","AuthReducer","state","action","initialStatus","AppReducer","reducers","combineReducers","MyPostReducer","MyDialogsReducer","MyUsersReducer","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","MyMessage","to","activeClassName","c","active","MyPage","Users","s","Navbar","className","navbar","Header","props","header","onClick","HeaderContainer","this","React","Component","connect","Content","lazy","App","initializeThunkCreator","wrapper","Suspense","fallback","Preloader","withRouter","promise","Promise","all","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","module","exports","src","preloader","alt","ChangePostttCreator","value","getUserProfile","userProfile","setStatus","arrPosts","currentPost","getStatusThunkCreator","updateStatusThunkCreator","getProfileDataTC","changeMessageCreator","result","elem","addMessageCreator","arrName","name","arrMessage","currentMessage","setIsFetching","isFetch","disableButton","users","totalUsersCount","isFetching","isFollowing","buttonUnfollowThunkCreator","buttonFollowThunkCreator","getUsersListTC","items","totalCount","map","followed","pageNumber","filter"],"mappings":"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","file":"static/js/main.4ee00889.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"cfccb3ca-be55-467e-9dac-366e94cf1bb6\"\r\n    }\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    authMe() {                              //В параметры можно загонять данные из .......Container\r\n        return instance.get('auth/me')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    login(formData) {                          //Делаем запрос на сервер на логинизацию\r\n        return instance.post('auth/login', formData)\r\n    },\r\n    logout() {                          //Делаем запрос на сервер на логинизацию\r\n        return instance.delete('auth/login')\r\n    }\r\n}\r\n\r\nexport const usersAPI = {\r\n   unfollow(userId) {\r\n     return  instance.delete(`follow/` + userId)\r\n    },\r\n    follow(userId) {\r\n      return  instance.post(`follow/` + userId)\r\n    },\r\n    getUsersList(currentPage, pageSize){\r\n       return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n   getStatus(userId){\r\n       return instance.get(`profile/status/${userId}`)\r\n   },\r\n   updateStatus(status){\r\n       return instance.put(`profile/status`, {\r\n           status: status\r\n       })\r\n   },\r\n    profileData(userId){\r\n       return instance.get(`profile/${userId}`)\r\n    }\r\n}\r\n","import {authAPI} from \"../API/API\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst GET_USER_DATA = 'GET_USER_DATA';\r\n\r\ntype InitialStateType={\r\n    id: null | number\r\n    email: null | string\r\n    login: null | string\r\n    isAuth: boolean\r\n}\r\nconst initialState: InitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\n\r\n\r\nconst AuthReducer = (state = initialState, action: any):InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype GetUserDataDataType={\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\ntype GetUserDataType={\r\n    type: typeof GET_USER_DATA\r\n    data: GetUserDataDataType\r\n}\r\nexport const getUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean): GetUserDataType => (\r\n     {\r\n        type: GET_USER_DATA,\r\n        data: {id, email, login, isAuth}\r\n     }\r\n)\r\n\r\nexport const getUserDataThunkCreator = () => (dispatch: any) => {\r\n    return authAPI.authMe().then((data: any) => {\r\n        if (data.resultCode === 0) {\r\n            let {id, email, login} = data.data;\r\n            dispatch(getUserData(id, email, login, true));\r\n        }\r\n    })\r\n}\r\n\r\nexport const sendLoginCreator = (formData: any) => (dispatch: any) => {\r\n    authAPI.login(formData).then((data: any) => {\r\n        if (data.data.resultCode === 0) {\r\n            dispatch(getUserDataThunkCreator());\r\n        } else {\r\n            let message = data.data.messages.length > 0 ? data.data.messages[0] : 'incorrect value';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    })\r\n}\r\n\r\nexport const sendLogoutCreator = () => (dispatch: any) => {\r\n    authAPI.logout().then((data:any) => {\r\n        if (data.data.resultCode === 0) {\r\n            dispatch(getUserData(null, null, null, false));\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport default AuthReducer;","import {getUserDataThunkCreator} from \"./AuthReducer\";\r\n\r\n\r\nconst INITIALIZE = 'INITIALIZE'\r\n\r\ntype InitialStateType = {\r\n    initialStatus: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    initialStatus: false\r\n}\r\n\r\n\r\nlet AppReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZE:\r\n            return {\r\n                ...state,\r\n                initialStatus: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype InitializeType= {type: typeof INITIALIZE}\r\nconst initialize = (): InitializeType =>  ({type: INITIALIZE})\r\n\r\nexport const initializeThunkCreator = () => (dispatch: any) => {\r\n    const promise = dispatch(getUserDataThunkCreator());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initialize());\r\n        });\r\n}\r\n\r\n\r\nexport default AppReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport MyPostReducer from \"./MyPostsReducer\";\r\nimport MyDialogsReducer from \"./MyDialogsReducer\";\r\nimport MyUsersReducer from \"./MyUsersReducer\";\r\nimport AuthReducer from \"./AuthReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nlet reducers= combineReducers({\r\n    MyPostReducer: MyPostReducer,\r\n    MyDialogsReducer: MyDialogsReducer,\r\n    MyUsersReducer: MyUsersReducer,\r\n    AuthReducer: AuthReducer,\r\n    form: formReducer,\r\n    AppReducer: AppReducer\r\n});\r\n\r\n const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n const store = createStore(reducers, /* preloadedState, */ composeEnhancers(\r\n       applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\n//let store= createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store= store;\r\n\r\nexport default store;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport c from \"./MyMessage.module.css\";\r\n\r\nconst MyMessage = () => {\r\n    return (\r\n        <div>\r\n            <NavLink to=\"/dialogs\" activeClassName={c.active} >\r\n                MyMessage\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyMessage;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport c from \"./MyPage.module.css\";\r\n\r\nconst MyPage = () => {\r\n    return (\r\n        <div>\r\n            <NavLink to= \"/posts\" activeClassName={c.active}>\r\n                MyPage\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPage;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Users.module.css\"\r\n\r\nconst Users= ()=>{\r\n    return (\r\n        <div>\r\n            <NavLink to= \"/users\" activeClassName={s.active} >\r\n                Users\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React from \"react\";\r\nimport c from \"./Navbar.module.css\";\r\nimport MyMessage from \"./MyMessage/MyMessage\";\r\nimport MyPage from \"./MyPage/MyPage\";\r\nimport Users from \"./Users/Users\";\r\n\r\nconst Navbar= ()=> {\r\n    return (\r\n        <div className= {c.navbar}>\r\n            <MyPage/>\r\n            <MyMessage/>\r\n            <Users/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport c from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header= (props)=> {\r\n    let logout= ()=>{\r\n        props.sendLogoutCreator();\r\n    }\r\n    return (\r\n        <div className= {c.header}>\r\n            <div className={c.login}>\r\n            { props.isAuth\r\n                ?<div>{props.login}  <button onClick={logout}>Logout</button></div>\r\n                :<NavLink to=\"/login\">login</NavLink>\r\n            }\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserDataThunkCreator, sendLogoutCreator} from \"../../Redux/AuthReducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        id: state.AuthReducer.id,\r\n        email: state.AuthReducer.email,\r\n        login: state.AuthReducer.login,\r\n        isAuth: state.AuthReducer.isAuth\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, {getUserDataThunkCreator, sendLogoutCreator})(HeaderContainer);\r\n","import React, {Component} from 'react';\nimport s from\"./App.module.css\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport {connect} from \"react-redux\";\nimport {initializeThunkCreator} from \"./Redux/AppReducer\";\nimport Preloader from \"./Components/Preloader/Preloader\";\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\nconst Content = React.lazy(() => import('./Components/Content/Content'));\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.initializeThunkCreator();\n  }\n\n  render() {\n\n    if (!this.props.initialStatus) {\n      return (\n          <div>\n            <Preloader/>\n          </div>\n      )\n    }\n\n    return (\n        <div className= {s.wrapper}>\n          <HeaderContainer/>\n          <Navbar/>\n          <React.Suspense fallback={<div>Загрузка...</div>}>\n            <Content/>\n          </React.Suspense>\n        </div>\n    )\n  }\n}\n\nlet mapStateToProps = (props) => {\n  return {\n    initialStatus: props.AppReducer.initialStatus\n  }\n}\n\nexport default compose(\n    withRouter,\n    connect(mapStateToProps, {initializeThunkCreator}))(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport store from './Redux/store_redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>, document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1niV_\",\"login\":\"Header_login__1_ST2\"};","import preloader from \"../../assets/images/preloader.png\";\r\nimport React from \"react\";\r\n\r\nlet Preloader= ()=>{\r\n    return (\r\n        <div><img src={preloader} alt=\"preloader\"/></div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import {profileAPI} from \"../API/API\";\r\n\r\nconst CHANGE_POSTTT = 'CHANGE-POSTTT';\r\nconst GET_USER_PROFILE = 'GET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS'\r\n\r\ntype ChangePostttCreatorType= {\r\n    type: typeof CHANGE_POSTTT\r\n    value: string\r\n}\r\nexport let ChangePostttCreator = (value: string): ChangePostttCreatorType => (\r\n     {type: CHANGE_POSTTT, value}\r\n)\r\n\r\ntype GetUserProfileType={\r\n  type: typeof GET_USER_PROFILE\r\n  userProfile: UserProfileType\r\n}\r\nexport let getUserProfile = (userProfile: UserProfileType): GetUserProfileType => (\r\n     {type: GET_USER_PROFILE, userProfile}\r\n)\r\n\r\ntype SetStatusType= {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nexport let setStatus = (status: string): SetStatusType => (\r\n     {type: SET_STATUS, status: status}\r\n)\r\n\r\ntype ContactsType={\r\n    facebook: null | string\r\n    github: null | string\r\n    instagram: null | string\r\n    mainLink: null | string\r\n    twitter: null | string\r\n    vk: null | string\r\n    website: null | string\r\n    youtube: null | string\r\n}\r\ntype PhotosType={\r\n    large: string | null\r\n    small: string | null\r\n}\r\ntype UserProfileType={\r\n    aboutMe: null | string\r\n    contacts: ContactsType\r\n    fullName: string | null\r\n    lookingForAJob: boolean | null\r\n    lookingForAJobDescription: null | string\r\n    userId: number\r\n    photos: PhotosType\r\n}\r\nconst initialState = {\r\n    arrPosts: ['Post1', 'Post2', 'Post3', 'Post4'] as Array<string>,\r\n    currentPost: '',\r\n    userProfile: null as UserProfileType | null,\r\n    status: ''\r\n}\r\ntype InitialStateType= typeof initialState\r\n\r\nconst MyPostReducer = (state = initialState, action: any):InitialStateType => {\r\n    if (action.type === CHANGE_POSTTT) {\r\n        return {\r\n            ...state,\r\n            arrPosts: [...state.arrPosts, action.value]\r\n        }\r\n    }\r\n\r\n    if (action.type === GET_USER_PROFILE) {\r\n        return {\r\n            ...state,\r\n            userProfile: action.userProfile\r\n        }\r\n    }\r\n    if (action.type === SET_STATUS) {\r\n        return {\r\n            ...state,\r\n            status: action.status\r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport let getStatusThunkCreator = (userId: number) => (dispatch: any) => {\r\n        profileAPI.getStatus(userId).then((response: any)  => {\r\n\r\n            dispatch(setStatus(response.data));\r\n        })\r\n    }\r\n\r\n\r\nexport let updateStatusThunkCreator = (status: string) =>  (dispatch: any) => {\r\n        profileAPI.updateStatus(status).then((response: any) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status));\r\n            }\r\n        })\r\n    }\r\nexport const getProfileDataTC= (userId: number) => (dispatch: any) => {\r\n    profileAPI.profileData(userId).then((response: any) =>{\r\n          dispatch(getUserProfile(response.data));\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default MyPostReducer;","const CHANGE_MESSAGE = 'CHANGE-MESSAGE';\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\n\r\ntype ChangeMessageCreatorType={\r\n    type: typeof CHANGE_MESSAGE\r\n    elem: string\r\n}\r\nexport const changeMessageCreator = (result: string):ChangeMessageCreatorType => (\r\n     {\r\n         type: CHANGE_MESSAGE,\r\n         elem: result\r\n     }\r\n)\r\n\r\ntype AddMessageCreatorType={\r\n    type: typeof ADD_MESSAGE\r\n    elem: string\r\n}\r\nexport const addMessageCreator = (result: string):AddMessageCreatorType => (\r\n     {\r\n         type: ADD_MESSAGE,\r\n         elem: result\r\n     }\r\n)\r\n\r\ntype ArrNameType={\r\n    name: string\r\n    id: string\r\n}\r\ntype ArrMessageType={\r\n    message: string\r\n    id: string\r\n}\r\nconst initialState = {\r\n    arrName: [\r\n        {name: 'Dima', id: '1'},\r\n        {name: 'Anna', id: '2'},\r\n        {name: 'Dasha', id: '3'},\r\n        {name: 'Margo', id: '4'}\r\n    ] as Array<ArrNameType>,\r\n    arrMessage: [\r\n        {message: 'Hello', id: '1'},\r\n        {message: 'Good day', id: '2'},\r\n        {message: 'By-By', id: '3'}\r\n    ] as Array<ArrMessageType>,\r\n    currentMessage: ''\r\n};\r\n\r\ntype InitialStateType= typeof initialState\r\n\r\n\r\nconst MyDialogsReducer = (state = initialState, action: any):InitialStateType => {\r\n\r\n    if (action.type === CHANGE_MESSAGE) {\r\n        return {\r\n            ...state,\r\n            currentMessage: action.elem\r\n        }\r\n    }\r\n\r\n    if (action.type === ADD_MESSAGE) {\r\n        return {\r\n            ...state,\r\n            arrMessage: [...state.arrMessage, {message: state.currentMessage, id: '4'}],\r\n            currentMessage: ''\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default MyDialogsReducer;","import {usersAPI} from \"../API/API\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_USERS_TOTAL_COUNT = 'SET_USERS_TOTAL_COUNT';\r\nconst SET_IS_FETCHING= 'SET_IS_FETCHING';\r\nconst DISABLE_BUTTON= 'DISABLE_BUTTON';\r\n\r\nexport let follow = (id) => {\r\n    return {type: FOLLOW, id: id};\r\n}\r\nexport let unfollow = (id) => {\r\n    return {type: UNFOLLOW, id: id};\r\n}\r\nexport let setUsers = (users) => {\r\n    return {type: SET_USERS, users}\r\n}\r\nexport let setCurrentPage = (pageNumber) => {\r\n    return {type: SET_CURRENT_PAGE, pageNumber}\r\n}\r\nexport let setUsersTotalCount = (totalCount) => {\r\n    return {type: SET_USERS_TOTAL_COUNT, totalCount}\r\n}\r\nexport let setIsFetching = (isFetch) => {\r\n    return {type: SET_IS_FETCHING, isFetch}\r\n}\r\nexport let disableButton = (result, userId) => {\r\n    return {type: DISABLE_BUTTON, result, userId}\r\n}\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 15,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    isFollowing: [ ]\r\n}\r\n\r\nlet MyUsersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((elem) => {\r\n                    if (elem.id === action.id) {\r\n                        return {...elem, followed: true}\r\n                    }\r\n                    return elem;\r\n                })\r\n            }\r\n        }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map((elem) => {\r\n                    if (elem.id === action.id) {\r\n                        return {...elem, followed: false}\r\n                    }\r\n                    return elem;\r\n                })\r\n            }\r\n        case  SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        }\r\n        case  SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber\r\n            }\r\n        }\r\n        case SET_USERS_TOTAL_COUNT : {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        }\r\n        case SET_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetch\r\n            }\r\n        }\r\n        case DISABLE_BUTTON: {\r\n            return {\r\n                ...state,\r\n                isFollowing: action.result\r\n                    ? [...state.isFollowing, action.userId]\r\n                    : state.isFollowing.filter(elem=> elem !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport let buttonUnfollowThunkCreator= (userId)=> (dispatch) => {\r\n        dispatch(disableButton(true, userId));\r\n        usersAPI.unfollow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unfollow(userId));\r\n            }\r\n            dispatch(disableButton(false, userId));\r\n        })\r\n    }\r\n\r\n\r\nexport let buttonFollowThunkCreator= (userId)=> (dispatch) => {\r\n        dispatch(disableButton(true, userId));\r\n        usersAPI.follow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(follow(userId));\r\n            }\r\n            dispatch(disableButton(false, userId));\r\n        })\r\n    }\r\n\r\nexport const getUsersListTC= (currentPage, pageSize)=> (dispatch)=> {\r\n    dispatch(setIsFetching(true));\r\n    usersAPI.getUsersList(currentPage, pageSize).then(response=> {\r\n        dispatch(setIsFetching(false));\r\n        dispatch(setUsers(response.data.items));\r\n        dispatch(setUsersTotalCount(response.data.totalCount));\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nexport default MyUsersReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__3d2A4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__3Gw8S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"MyMessage_active__1bMAs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"MyPage_active__3s-Oy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Users_active__3jMg7\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.ad438a26.png\";"],"sourceRoot":""}